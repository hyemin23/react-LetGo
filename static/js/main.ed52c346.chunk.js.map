{"version":3,"sources":["fbInstance.js","routes/Auth.js","routes/JoinForm.js","routes/Navigation.js","routes/Profile.js","components/AddProfile.js","components/Npost.js","routes/Home.js","components/AppRouter.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","fbStorage","storage","Auth","useState","email","setEmail","password","setPassowrd","error","setError","onChange","e","preventDefault","name","target","value","onSubmit","a","signInWithEmailAndPassword","console","log","message","socialLogin","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","then","data","alert","className","icon","faHandHolding","color","size","style","marginBottom","fontSize","fontWeight","marginTop","type","placeholder","required","autoFocus","onClick","faGoogle","faGithub","to","textDecoration","faUserPlus","JoinForm","joinEmail","setJoinEmail","joinPassword","setJoinPassowrd","history","useHistory","createUserWithEmailAndPassword","push","Navigation","userObj","onLogout","signOut","display","displayName","faUser","faPowerOff","Profile","refreshUser","newProfileObj","setNewProfileObj","onEditToggle","setOnEditToggle","editObj","setEditObj","getMyPosts","collection","where","uid","orderBy","get","nProfile","docs","map","doc","postId","id","useEffect","updateProfile","catch","writerId","prev","profile","text","date","AddProfile","posts","setPosts","attachment","setAttachment","resultUrl","Date","undefined","fileRef","ref","child","uuid","putString","res","getDownloadURL","resultObj","getDate","add","maxLength","for","faCameraRetro","accept","theFile","files","reader","FileReader","onload","finishedEvent","currentTarget","result","readAsDataURL","opacity","src","backgroundImage","faWindowClose","Npost","post","userPostCheck","updateToggle","setUpdateToggle","updateText","setUpdateText","onRemove","window","confirm","delete","refFromURL","onToggle","update","textAlign","width","height","class","cursor","faTrash","faPencilAlt","Home","newPosts","setNewPosts","onSnapshot","snapshot","newObj","AppRouter","isLoggedIn","maxWidth","margin","justifyContent","exact","path","render","component","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ed52c346.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY\n    , authDomain: process.env.REACT_APP_AUTH_DOMAIN\n    , projectId: process.env.REACT_APP_PROJECT_ID\n    , storageBucket: process.env.REACT_APP_STORAGE_BUCKET\n    , messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n    , appId: process.env.REACT_APP_APP_ID\n    , measurementId: process.env.REACT_APP_MEASUREMENT_ID\n};\n\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n//파이어베이스 인스턴스 생성\nexport const firebaseInstance = firebase;\n\n//파이어베이스 보안 재사용\nexport const authService = firebase.auth();\n\n//파이어베이스 database 사용\nexport const dbService = firebase.firestore();\n\n//파이어베이스 storage 사용\nexport const fbStorage = firebase.storage();","import { authService, firebaseInstance } from \"fbInstance\";\nimport { useState } from \"react\";\nimport { Link, Route, HashRouter as Router } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n    faTwitter,\n    faGoogle,\n    faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\nimport { faHandHolding, faUserPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Auth = () => {\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassowrd] = useState(\"\");\n    const [error, setError] = useState(\"\");\n\n    const onChange = (e) => {\n        e.preventDefault();\n\n        const { name } = e.target;\n\n        if (name === \"email\") {\n            setEmail(e.target.value);\n        } else if (name === \"passowrd\") {\n            setPassowrd(e.target.value);\n        }\n\n    }\n\n    //로그인\n    const onSubmit = async (e) => {\n\n        e.preventDefault();\n\n        try {\n            await authService.signInWithEmailAndPassword(email, password);\n        } catch (error) {\n            console.log(error);\n            setError(error.message);\n        }\n    }\n\n    // 깃허브 구글 로그인 분기\n    const socialLogin = async (e) => {\n        e.preventDefault();\n        console.log(e.target);\n        const { name } = e.target;\n\n        let provider;\n\n        //구글 로그인\n        //크롬은 팝업 창 안 열림\n        if (name === \"google\") {\n\n            console.log(\"google 로그인\");\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        }\n        //깃허브 로그인\n        else if (name === \"git\") {\n            console.log(\"git 로그인\");\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n\n        await authService.signInWithPopup(provider).then((data) => {\n            alert(\"로그인 성공!\");\n        });\n    }\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faHandHolding}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <h2 style={{ fontSize: \"25px\", fontWeight: 600 }}>놓고(Go)\n                </h2>\n            <p style={{ marginTop: \"14px\", fontSize: \"15px\", }}> 가져갈게요. 두고 가세요.</p>\n\n            <form onSubmit={onSubmit} className=\"container\">\n\n                <div>\n\n                    <input\n                        type=\"text\" placeholder=\"Email\" required\n                        onChange={onChange}\n                        name=\"email\"\n                        value={email}\n                        className=\"authInput\"\n                        autoFocus\n                    />\n                </div>\n                <div>\n                    <input\n                        type=\"password\" placeholder=\"Password\" required\n                        onChange={onChange}\n                        name=\"passowrd\"\n                        password={password}\n                        className=\"authInput\"\n                    />\n                </div>\n\n                <button type=\"submit\" value=\"LogIn\" name=\"login\"\n                    className=\"authInput authSubmit\"\n                >Login</button>\n                {error &&\n                    <p className=\"authError\">\n                        {error}\n                    </p>}\n\n            </form>\n\n\n            <div className=\"authBtns\">\n                <button type=\"button\" name=\"google\" onClick={socialLogin} className=\"authBtn\">\n                    <FontAwesomeIcon icon={faGoogle} color={\"#04AAFF\"}\n                    />\n                    <p>Google 로그인</p>\n                </button>\n\n                <button type=\"button\" name=\"git\" onClick={socialLogin} className=\"authBtn\">\n                    <FontAwesomeIcon icon={faGithub} color={\"#04aaff\"} />\n                    <p>Github 로그인</p>\n                </button>\n\n                <button className=\"authBtn\">\n                    <Link to=\"/joinForm\" style={{ textDecoration: \"none\", color: \"black\" }}>\n                        <FontAwesomeIcon icon={faUserPlus} color={\"#04aaff\"} />\n                        <p>회원가입</p>\n                    </Link>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Auth;","import { authService } from \"fbInstance\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst JoinForm = () => {\n\n    const [joinEmail, setJoinEmail] = useState(\"\");\n    const [joinPassword, setJoinPassowrd] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const history = useHistory();\n    //회원가입\n    const onChange = (e) => {\n        const { name } = e.target;\n        if (name === \"joinEmail\") {\n            setJoinEmail(e.target.value);\n        } else if (name === \"joinPassword\") {\n            setJoinPassowrd(e.target.value);\n        }\n\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n\n        try {\n            //회원가입일 경우\n            await authService.createUserWithEmailAndPassword(joinEmail, joinPassword);\n\n            alert(\"회원가입 성공!\");\n            history.push(\"/\");\n        } catch (error) {\n            console.log(error);\n            setError(error.message);\n        }\n    }\n\n\n\n    return (\n        <div>\n            <form onSubmit={onSubmit}>\n                <input type=\"text\" placeholder=\"Email\" required\n                    onChange={onChange}\n                    name=\"joinEmail\"\n                    value={joinEmail} />\n                <input type=\"password\" placeholder=\"Password\" required\n                    onChange={onChange}\n                    name=\"joinPassword\"\n                    password={joinPassword} />\n                {error && <p>{error}</p>}\n                <input type=\"submit\" />\n            </form>\n        </div>\n    );\n}\n\nexport default JoinForm;\n","import React from 'react'\nimport { Link, useHistory } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faHandHolding, faPowerOff, faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport { authService } from 'fbInstance';\n\nfunction Navigation({ userObj }) {\n\n    const history = useHistory();\n    const onLogout = async (e) => {\n        e.preventDefault();\n\n        try {\n            await authService.signOut();\n            alert(\"로그아웃 성공!\");\n            history.push(\"/\");\n        } catch (error) {\n            console.log(error);\n            alert(\"로그아웃 실패\");\n        }\n    }\n\n\n    return (\n        <nav>\n            <div className=\"home_logo\">\n                <span style={{ display: \"block\" }}>\n                    <Link to=\"/\">\n                        <FontAwesomeIcon icon={faHandHolding}\n                            color={\"#04AAFF\"}\n                            size=\"5x\" />\n                    </Link>\n                </span>\n                <h2 style={{ display: \"block\", marginTop: 35 }}>just left behind</h2>\n            </div>\n\n            {userObj &&\n                <div className=\"home_info\">\n                    <ul>\n                        <li>\n                            <span>\n                                {userObj.displayName === true ? <>\n                                    <em>{userObj.displayName}님 환영합니다.</em></> : <em>닉네임을 설정해주세요.</em>\n                                }\n                            </span>\n                        </li>\n                        <li>\n                            <span>\n                                <Link to=\"/profile\" className=\"header_profile\">\n                                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"}\n                                        size=\"1x\" />\n                                </Link>\n                            </span>\n                        </li>\n                        <li>\n                            <span onClick={onLogout} className=\"header_logout\" >\n                                <FontAwesomeIcon icon={faPowerOff} size=\"1x\"\n                                    color={\"#04AAFF\"} />\n                            </span>\n                        </li>\n                    </ul>\n                </div>\n            }\n        </nav>\n    )\n}\n\nexport default Navigation\n","import { dbService } from 'fbInstance';\nimport React, { useEffect, useState } from 'react';\n\nfunction Profile({ userObj, refreshUser }) {\n\n    const [newProfileObj, setNewProfileObj] = useState(\"\");\n    const [onEditToggle, setOnEditToggle] = useState(false);\n    const [editObj, setEditObj] = useState({\n\n        displayName: \"\"\n    });\n\n    //내가 쓴 게시물만 보기\n    const getMyPosts = async () => {\n        //파이어베이스의 조건문 where 이용\n        const nProfile = await dbService.collection(\"newSend\").where(\"writerId\", \"==\", userObj.uid).orderBy(\"date\", \"desc\").get();\n\n        console.log(nProfile);\n\n\n        const newProfileObj = nProfile.docs.map((doc) => ({\n            postId: doc.id\n            , ...doc.data()\n        }));\n\n        setNewProfileObj(newProfileObj);\n    }\n\n\n\n    useEffect(() => {\n        getMyPosts();\n    }, []);\n\n\n\n    //프로필 수정\n    const onEditProfile = (e) => {\n        //내 정보 수정이면 폼 변경\n        setOnEditToggle(true);\n    }\n\n\n    //입력된 정보들 수정\n    const onSubmit = async (e) => {\n        e.preventDefault();\n\n        //수정할 정보들 업데이트\n        await userObj.updateProfile(editObj).then(() => {\n            alert(\"수정되었습니다!\");\n\n            //유저 새로고침\n            refreshUser();\n\n        }).catch((error) => {\n            alert(error.message);\n        });\n\n\n\n        setEditObj({});\n        setOnEditToggle(false);\n\n    }\n\n    //입력된 정보들 상태값에 저장\n    const onChange = (e) => {\n        const { name, value } = e.target;\n        if (name === \"displayName\") {\n            setEditObj({ \"displayName\": value });\n        }\n    }\n\n    return (\n        <div className=\"profile_change_form\">\n            <span onClick={onEditProfile}\n            >\n                닉네임 변경\n            </span>\n\n\n\n            {onEditToggle &&\n                <>\n                    <form className=\"profile_change\">\n                        <input type=\"text\" placeholder=\"변경하실 닉네임을 입력해주세요.\"\n                            name=\"displayName\"\n                            value={editObj.writerId}\n                            onChange={onChange}\n                        />\n\n                        <div>\n                            <button type=\"submit\" onClick={onSubmit}>\n                                변경\n                        </button>\n                            <button type=\"cancel\" onClick={() => setOnEditToggle((prev) => !prev)} >\n                                취소\n                        </button>\n                        </div>\n                    </form>\n\n                </>\n            }\n            <hr />\n\n            {userObj &&\n                <h2>\n                    {userObj.displayName ? <>{`${userObj.displayName}님이 두고 간 목록`}</> : <p>닉네임을 설정해주세요</p>}\n                </h2>\n            }\n            <div className=\"profile_write\">\n                {newProfileObj && newProfileObj.map((profile => (\n                    <div className=\"profile_write_form\">\n                        <p>{`내용 : ${profile.text} 작성일 : ${profile.date}`} </p>\n                    </div>\n                )))}\n            </div>\n        </div>\n    )\n}\n\nexport default Profile;\n","import { faCamera, faCameraRetro, faPlus, faWindowClose } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { dbService, fbStorage } from 'fbInstance';\nimport React, { useState } from 'react'\nimport { v4 as uuid } from \"uuid\";\n\nfunction AddProfile({ userObj }) {\n\n    //입력한 게시글 내용\n    const [posts, setPosts] = useState(\"\");\n    //file url 가져오기\n    const [attachment, setAttachment] = useState(\"\");\n    const onChange = (e) => {\n        e.preventDefault();\n        setPosts(e.target.value);\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n\n        let resultUrl = \"\";\n        let date = new Date();\n\n\n        if (attachment !== null && attachment !== undefined && attachment !== \"\") {\n            //child에서는 기본적으로 경로를 만드는 메서드\n            //사진의 경로 : 파일에 대한 ref\n            //여기는 그냥 파일에 대한 저장소 즉, ref 만 생성하는 곳 ( 파일을 생성하는 곳이 아님)\n            const fileRef = fbStorage.ref().child(`${userObj.uid}/${uuid()}`);\n\n            //upload = putString으로 업로드 base64 문자열이므로\n            //임의로 만든 파일 경로(fileRef) 에 업로드할 파일경로(attachment)를 올린다고 생각\n            const res = await fileRef.putString(attachment, \"data_url\");\n\n            //최종 경로\n            resultUrl = await res.ref.getDownloadURL();\n\n            const resultObj = {\n                \"text\": posts\n                , \"date\": date.getDate()\n                , \"writerId\": userObj.uid\n                , resultUrl\n            }\n\n            //사진을 먼저 저장소에 업로드 하고 그 base64 URL을 받아와서 작업한다\n            await dbService.collection(\"newSend\").add(resultObj).then(function (data) {\n                alert(\"게시글이 등록되었습니다.\");\n                console.log(data);\n            });\n\n\n        } else {\n\n            console.log(resultUrl);\n            const resultObj = {\n                \"text\": posts\n                , \"date\": date.getDate()\n                , \"writerId\": userObj.uid\n                , \"resultUrl\": resultUrl\n            }\n\n            await dbService.collection(\"newSend\").add(resultObj).then(function (data) {\n                alert(\"게시글이 등록되었습니다.\");\n                console.log(data);\n            });\n\n        }\n        setPosts(\"\");\n        setAttachment(\"\");\n    }\n\n    //사진 초기화\n    const onClear = () => {\n        setAttachment(\"\");\n    }\n\n    //파일 API 사용\n    const onFileChange = (e) => {\n\n        const { files } = e.target;\n\n        //file Reader API 사용\n        const theFile = files[0];\n        const reader = new FileReader();\n\n        //파일 로딩이 끝나면 그 후 여기 실행\n        reader.onload = (finishedEvent) => {\n            setAttachment(finishedEvent.currentTarget.result);\n        }\n\n        //파일로딩\n        reader.readAsDataURL(theFile);\n    }\n\n    return (\n\n\n        <form onSubmit={onSubmit} className=\"addedProfileForm\">\n            <div className=\"addedProfileForm_input_container\">\n                <input type=\"text\" value={posts} onChange={onChange}\n                    placeholder=\"오늘 하루는 어땠나요?\"\n                    maxLength={200}\n                    className=\"addProfileInput\" />\n                <button type=\"submit\" className=\"addProfileSubmit\">\n                    놓고가기\n                </button>\n            </div>\n\n            <label for=\"file-upload\"\n                className=\"file-upload-label\"\n            >\n                <span>함께 올리기</span>\n                <FontAwesomeIcon icon={faCameraRetro} />\n            </label>\n\n            <input type=\"file\"\n                accept=\"image/*\"\n                id=\"file-upload\"\n                onChange={onFileChange}\n                style={{ opacity: 0 }}\n            />\n\n            {attachment && (\n                <div className=\"profile_image_uploaded\">\n                    <img src={attachment}\n                        style={{ backgroundImage: attachment }}\n                    />\n                    <div className=\"image_cancel_btn\">\n                        <span onClick={onClear}>\n                            <FontAwesomeIcon icon={faWindowClose}\n                                size=\"1.5x\"\n                                color={\"red\"} />\n                        </span>\n                    </div>\n                </div>\n            )\n            }\n\n        </form>\n    )\n}\n\nexport default AddProfile;\n\n\n","import { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { dbService, fbStorage } from 'fbInstance';\nimport React, { useState } from 'react'\n\nfunction Npost({ post, userPostCheck }) {\n\n    const [updateToggle, setUpdateToggle] = useState(false);\n    const [updateText, setUpdateText] = useState(post.text);\n\n    const onRemove = async () => {\n        console.log(\"onRemove\");\n        const ok = window.confirm(\"정말 삭제하시겠습니까?\");\n        if (ok) {\n\n            //게시글 삭제\n            await dbService.doc(`newSend/${post.postId}`).delete();\n\n            //사진이 있었다면 사진 삭제\n            if (!!post.resultUrl) await fbStorage.refFromURL(post.resultUrl).delete();\n\n\n            alert(\"삭제되었습니다.\");\n\n\n        } else {\n            return false;\n        }\n    }\n\n    //수정액션\n    //3번 랜더링 하니까 각각 렌더링되기때문\n    const onToggle = () => {\n        setUpdateToggle((prev) => !prev);\n\n    }\n    const onChange = (e) => {\n        e.preventDefault();\n        setUpdateText(e.target.value);\n    }\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        await dbService.doc(`newSend/${post.postId}`).update({ text: updateText });\n\n        setUpdateToggle(false);\n        alert(\"수정되었습니다!\");\n    }\n\n    //토글이 true면 업데이트 창 보여주기\n    return (\n        <div className=\"newPost\">\n            {updateToggle ? (\n                <>\n                    <form onSubmit={onSubmit} className=\"container newPostEdit\">\n                        <input type=\"text\" value={updateText} onChange={onChange}\n                            className=\"formInput\"\n                        />\n                        <div style={{ textAlign: \"center\" }}>\n                            <button type=\"submit\" className=\"formBtn\">\n                                수정\n                            </button>\n                            <input type=\"button\" value=\"취소\" onClick={onToggle} className=\"formCancelBtn\" />\n                        </div>\n                    </form>\n\n                </>\n            ) : (\n                    <>\n                        {\n                            post.writerId &&\n                            <div className=\"wirte_Info\">\n                                <p>{`내용 : ${post.text}`}</p>\n                                <p>날짜 : {post.date}</p>\n                                <p>작성자 :{post.writerId}</p>\n                            </div>\n                        }\n\n                        {\n                            post.resultUrl && (\n                                <img src={post.resultUrl} width=\"50px\" height=\"50px\" />\n                            )}\n\n                        {\n                            userPostCheck && (\n                                <div class=\"post_actions\">\n                                    <span onClick={onRemove} name=\"delete\" style={{ cursor: \"pointer\" }}>\n                                        <FontAwesomeIcon icon={faTrash} color={\"rgba(255,89,0)\"} />\n                                    </span>\n\n                                    <span onClick={onToggle} name=\"onEdit\"\n                                        style={{ cursor: \"pointer\" }}>\n                                        <FontAwesomeIcon icon={faPencilAlt}\n                                            color={\" rgb(95, 154, 242)\"} />\n                                    </span>\n                                </div>\n                            )}\n                    </>\n                )}\n        </div>\n    );\n\n}\n\nexport default Npost;\n\n","import AddProfile from \"components/AddProfile\";\nimport Npost from \"components/Npost\";\nimport { dbService } from \"fbInstance\";\nimport { useEffect, useState } from \"react\";\n\nconst Home = ({ userObj }) => {\n\n\n    //게시글 목록들 가져오기 \n    const [newPosts, setNewPosts] = useState([]);\n\n    useEffect(() => {\n        dbService.collection(\"newSend\").orderBy(\"date\", \"desc\").onSnapshot((snapshot) => {\n\n            const newObj = snapshot.docs.map(doc => ({\n                postId: doc.id\n                , ...doc.data()\n            }));\n            setNewPosts(newObj);\n        });\n    }, []);\n\n\n\n    return (\n        <div className=\"container\">\n            <AddProfile userObj={userObj} />\n\n            <h2 style={{ fontSize: 25, fontWeight: 600, textAlign: \"center\", marginBottom: 35, marginTop: 20 }}>Our Memory</h2>\n\n            {newPosts && newPosts.map((post) =>\n                (\n                    <>\n                        {post && userObj && (\n                            <Npost\n                                key={post.id}\n                                post={post}\n                                userPostCheck={post.writerId === userObj.uid}\n                            />\n                        )}\n                    </>\n                )\n            )}\n\n        </div>\n    )\n\n}\n\nexport default Home;","\nimport { Route, HashRouter as Router, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport JoinForm from \"routes/JoinForm\";\nimport Navigation from \"routes/Navigation\";\nimport Profile from \"routes/Profile\";\nimport Home from \"../routes/Home\";\n\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\n\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n\n                {isLoggedIn ?\n                    <div style={{\n                        maxWidth: 890,\n                        width: \"100%\"\n                        , margin: \"0 auto\"\n                        , marginTop: 80\n                        , display: \"flex\"\n                        , justifyContent: \"center\"\n                    }}>\n                        <Route exact path=\"/\" render={() => <Home userObj={userObj} />} />\n                        <Route exact path=\"/profile\" render={() => <Profile userObj={userObj} refreshUser={refreshUser} />} />\n                    </div>\n                    :\n                    <>\n                        <Route exact path=\"/\" component={Auth} />\n                        <Route exact path=\"/joinForm\" component={JoinForm} />\n                    </>\n                }\n            </Switch>\n        </Router>\n    );\n};\n\n\nexport default AppRouter;","\nimport { authService } from \"fbInstance\";\nimport { useEffect, useState } from \"react\";\nimport AppRouter from \"./AppRouter\";\nimport \"../css/App.css\";\nimport styled from \"styled-components\";\nfunction App() {\n\n  //init이 false면 router를 숨김\n  //즉 firebase의 초기화 여부에 따라 정해짐\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    //로그인 감지\n    authService.onAuthStateChanged((user) => {\n\n\n      //만약 로그인을 했다면\n      if (user) {\n\n        console.log(\"로그인한 유저 :\", user);\n        setIsLoggedIn(true);\n\n        //user 객체가 크므로 원하는 속성들만 모아서 넣어주기\n        setUserObj({\n          displayName: user.displayName\n          , uid: user.uid\n          , updateProfile: (args) => user.updateProfile(args)\n        });\n      }\n      //로그인을 하지 않았다면\n      else {\n        setUserObj(null);\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  //유저 새로고침\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName\n      , uid: user.uid\n      , updateProfile: (args) => user.updateProfile(args)\n    })\n  }\n\n  return (\n    <>\n      {\n\n        init ? <AppRouter isLoggedIn={isLoggedIn} userObj={userObj} refreshUser={refreshUser} /> : \"Initializing...\"\n\n      }\n    </>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./css/App.css\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}